/**
 * @since 1.0.0
 */
import * as JSONSchema from "effect/JSONSchema";
import * as Record from "effect/Record";
/**
 * @category encoding
 * @since 1.0.0
 */
export const make = schema => {
  const defs = {};
  const out = makeWithDefs(schema, {
    defs
  });
  if (!Record.isEmptyRecord(defs)) {
    out.$defs = defs;
  }
  return out;
};
/**
 * Creates a schema with additional options and definitions.
 *
 * - `defs`: A record of definitions that are included in the schema.
 * - `defsPath`: The path to the definitions within the schema (defaults to "#/$defs/").
 * - `topLevelReferenceStrategy`: Controls the handling of the top-level reference. Possible values are:
 *   - `"keep"`: Keep the top-level reference (default behavior).
 *   - `"skip"`: Skip the top-level reference.
 *
 * @category encoding
 * @since 1.0.0
 */
export const makeWithDefs = (schema, options) => {
  const jsonSchema = JSONSchema.fromAST(schema.ast, {
    definitions: options.defs,
    definitionPath: options.defsPath ?? "#/components/schemas/",
    target: "openApi3.1",
    topLevelReferenceStrategy: options.topLevelReferenceStrategy ?? "keep"
  });
  return jsonSchema;
};
//# sourceMappingURL=OpenApiJsonSchema.js.map